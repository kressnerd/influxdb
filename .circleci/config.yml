version: 2.1

orbs:
  terraform: circleci/terraform@2.1.0

parameters:
  aws_teardown:
    default: false
    type: boolean
  aws_teardown_branch:
    default: "n/a"
    type: string
  aws_teardown_sha:
    default: "n/a"
    type: string
  aws_teardown_datestring:
    default: "n/a"
    type: string

jobs:
  build_and_test:
    machine:
      enabled: true
      docker_layer_caching: true
    environment:
      - PARALLELISM: 4 # Input to influxdb/build.py
    parallelism: 4 # How many CircleCI test containers
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Ensure CircleCI parallelism matches "./test.sh count"
          command: "[ `./test.sh count` -eq $CIRCLE_NODE_TOTAL ]"
      - run:
          name: Execute test
          command: ./test.sh ${CIRCLE_NODE_INDEX}
          no_output_timeout: 1500s
      - run:
          name: Rename packages
          command: |
            set -x
            if [ 0 -eq ${CIRCLE_NODE_INDEX} ]; then
              ls build
              mv build packages
            else
              mkdir -p packages
              touch packages/${CIRCLE_NODE_INDEX}-dummy.deb  # this is a hack to make persisting to workspace work for all parallel executors, even though some don't produce build output
            fi
      - store_artifacts:
          path: packages/
      - persist_to_workspace:
          root: .
          paths:
            - packages/influx_tools
            - packages/*.deb

  pkg_run_test:
    executor: terraform/default
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "91:0a:5b:a7:f9:46:77:f3:5d:4a:cf:d2:44:c8:2c:5a"
      - terraform/validate:
          path: scripts/ci/
      - run:
          name: Terraform apply
          command: |
            set -x 
            export DEBNAME=$(find /tmp/workspace/packages/influxdb*amd64.deb)
            terraform -chdir=scripts/ci init -input=false
            AWS_ACCESS_KEY_ID=$TEST_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$TEST_AWS_SECRET_ACCESS_KEY terraform \
              -chdir=scripts/ci \
              apply \
                -auto-approve \
                -var package_path=${DEBNAME} \
                -var instance_name=circleci-terraform-${CIRCLE_SHA1} \
                -var additional_files_dir=${PWD}/scripts/ci/tests/
      - run:
          name: Install deb
          command: |
            set -x
            export ec2_ip=$(terraform -chdir=scripts/ci output -raw test_node_ssh)
            ssh -o "StrictHostKeyChecking=no" ubuntu@$ec2_ip \<< EOF
            sudo apt-get update && sudo apt-get install -y /home/ubuntu/influxdb.deb
            EOF
      - run:
          name: Run tests
          command: |
            set -x
            export ec2_ip=$(terraform -chdir=scripts/ci output -raw test_node_ssh)
            ssh -o "StrictHostKeyChecking=no" ubuntu@$ec2_ip 'for file in $(find /home/ubuntu/files/ -maxdepth 1 -mindepth 1); do sudo ./$file; done'
      - run:
          name: Test default config
          command: |
            set -x
            export ec2_ip=$(terraform -chdir=scripts/ci output -raw test_node_ssh)
            ssh -o "StrictHostKeyChecking=no" ubuntu@$ec2_ip \<< EOF
            sudo service influxdb start
            sudo service influxdb stop
            EOF
      - run:
          name: Test https with self-signed certs
          command: |
            set -x
            export ec2_ip=$(terraform -chdir=scripts/ci output -raw test_node_ssh)
            ssh -o "StrictHostKeyChecking=no" ubuntu@$ec2_ip \<< EOF
            sudo sed -i 's/  # https-enabled = false/  https-enabled = true/' /etc/influxdb/influxdb.conf
            sudo sed -i 's|  # https-certificate = "/etc/ssl/influxdb.pem"|  https-certificate = "/etc/ssl/influxdb.crt"|' /etc/influxdb/influxdb.conf
            sudo sed -i 's|  # https-private-key = ""|  https-private-key = "/etc/ssl/influxdb.key"|' /etc/influxdb/influxdb.conf
            sudo openssl req -x509 -nodes -newkey rsa:2048 -keyout /etc/ssl/influxdb.key -out /etc/ssl/influxdb.crt -days 365 -subj /C=US/ST=CA/L=sanfrancisco/O=influxdata/OU=edgeteam/CN=localhost
            sudo chown influxdb:influxdb /etc/ssl/influxdb.*
            sudo service influxdb start
            sudo service influxdb stop
            sudo sed -i 's/  https-enabled/  # https-enabled/' /etc/influxdb/influxdb.conf
            sudo sed -i 's|  https-certificate|  # https-certificate|' /etc/influxdb/influxdb.conf
            sudo sed -i 's|  https-private-key = ""|  # https-private-key|' /etc/influxdb/influxdb.conf
            EOF
      - run:
          name: Terraform destroy
          command: |
            AWS_ACCESS_KEY_ID=$TEST_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$TEST_AWS_SECRET_ACCESS_KEY terraform \
              -chdir=scripts/ci \
              destroy \
                -auto-approve

  perf_test:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "91:0a:5b:a7:f9:46:77:f3:5d:4a:cf:d2:44:c8:2c:5a"
      - run:
          name: Run test in AWS instance
          no_output_timeout: 20m
          command: AWS_ACCESS_KEY_ID=${TEST_AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${TEST_AWS_SECRET_ACCESS_KEY} scripts/ci/perf_test.sh
  aws_destroy_by_date:
    machine:
      enabled: true
      docker_layer_caching: true
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "91:0a:5b:a7:f9:46:77:f3:5d:4a:cf:d2:44:c8:2c:5a"
      - run:
          name: Destroy AWS instances with datestring more than a day old
          no_output_timeout: 20m
          command: |
            set -x
            yesterday_date=$(date --date "yesterday" +%Y%m%d)
            instance_info=$(AWS_ACCESS_KEY_ID=${TEST_AWS_ACCESS_KEY_ID} \
              AWS_SECRET_ACCESS_KEY=${TEST_AWS_SECRET_ACCESS_KEY} \
              aws --region us-west-2 ec2 describe-instances \
                --filters "Name=tag:Name,Values=oss-perftest-*" \
                --query "Reservations[].Instances[].[InstanceId, Tags[?Key=='Name']|[0].Value]" \
                --output text)
            while [ -n "$instance_info" ]; do
              instance_id=$(echo $instance_info | tr -s ' ' | cut -d ' ' -f1)
              name=$(echo $instance_info | tr -s ' ' | cut -d ' ' -f2)
              instance_info=$(echo $instance_info | tr -s ' ' | cut -d ' ' -f3-)
              date=$(echo $name | cut -d '-' -f3)
              if [ $date -le $yesterday_date ]; then
                AWS_ACCESS_KEY_ID=${TEST_AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${TEST_AWS_SECRET_ACCESS_KEY} aws --region us-west-2 ec2 terminate-instances --instance-ids $instance_id
              fi
            done
  aws_destroy_by_name:
    machine:
      enabled: true
      docker_layer_caching: true
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "91:0a:5b:a7:f9:46:77:f3:5d:4a:cf:d2:44:c8:2c:5a"
      - run:
          name: Destroy AWS instances by constructing name from arguments
          no_output_timeout: 20m
          command: |
            set -x
            name=oss-perftest-<< pipeline.parameters.aws_teardown_datestring >>-<< pipeline.parameters.aws_teardown_branch >>-<< pipeline.parameters.aws_teardown_sha >>
            instance_id=$(AWS_ACCESS_KEY_ID=${TEST_AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${TEST_AWS_SECRET_ACCESS_KEY} aws --region us-west-2 ec2 describe-instances --filters "Name=tag:Name,Values=$name" --query 'Reservations[].Instances[].InstanceId' --output text)
            AWS_ACCESS_KEY_ID=${TEST_AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=${TEST_AWS_SECRET_ACCESS_KEY} aws --region us-west-2 ec2 terminate-instances --instance-ids $instance_id

workflows:
  version: 2
  on_push:
    when:
      not: << pipeline.parameters.aws_teardown >>
    jobs:
      - build_and_test
      - pkg_run_test:
          requires:
            - build_and_test
      - perf_test:
          requires:
            - build_and_test
          filters:
            branches:
              only:
                - "1.8"
  aws_destroy_daily:
    triggers:
      - schedule:
          # run every day at 10pm -- note: use spaces, not tabs
          cron: "0 22 * * *"
          filters:
            branches:
              only:
                - "1.8"
                - "2.0"
    jobs:
      - aws_destroy_by_date
  aws_destroy_callback:
    when: << pipeline.parameters.aws_teardown >>
    jobs:
      - aws_destroy_by_name
